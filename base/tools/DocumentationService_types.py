#encoding: utf-8
##################################################
# file: DocumentationService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    wsdl2py --complexType ../../openorange/routines/DocumentationWebServices.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://www.openorange.com.ar/WSSpecification/DocumentationServices
##############################

class ns0:
    targetNamespace = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"

    class AppendRequestAuthType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "AppendRequestAuthType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AppendRequestAuthType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Company"), aname="_Company", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"User"), aname="_User", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UserName"), aname="_UserName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Company = None
                    self._User = None
                    self._UserName = None
                    self._Password = None
                    return
            Holder.__name__ = "AppendRequestAuthType_Holder"
            self.pyclass = Holder

    class AppendRequestDataType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "AppendRequestDataType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AppendRequestDataType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"TableName"), aname="_TableName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FieldName"), aname="_FieldName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TableName = None
                    self._FieldName = None
                    self._Description = None
                    return
            Holder.__name__ = "AppendRequestDataType_Holder"
            self.pyclass = Holder

    class AppendResponseResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "AppendResponseResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AppendResponseResultType_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ErrorCode"), aname="_ErrorCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Status = None
                    self._ErrorCode = None
                    self._Description = None
                    return
            Holder.__name__ = "AppendResponseResultType_Holder"
            self.pyclass = Holder

    class GetRequestDataType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "GetRequestDataType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetRequestDataType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"TableName"), aname="_TableName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FieldName"), aname="_FieldName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TableName = None
                    self._FieldName = None
                    return
            Holder.__name__ = "GetRequestDataType_Holder"
            self.pyclass = Holder

    class GetResponseResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "GetResponseResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetResponseResultType_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ErrorCode"), aname="_ErrorCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Status = None
                    self._ErrorCode = None
                    self._Description = None
                    return
            Holder.__name__ = "GetResponseResultType_Holder"
            self.pyclass = Holder

    class GetResponseDataType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "GetResponseDataType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetResponseDataType_Def.schema
            TClist = [GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","FieldsArrayType",lazy=False)(pname=(ns,"FieldsArray"), aname="_FieldsArray", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FieldsArray = []
                    return
            Holder.__name__ = "GetResponseDataType_Holder"
            self.pyclass = Holder

    class FieldsArrayType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "FieldsArrayType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FieldsArrayType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"TableName"), aname="_TableName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FieldName"), aname="_FieldName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","LinksDataType",lazy=False)(pname=(ns,"LinksArray"), aname="_LinksArray", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TableName = None
                    self._FieldName = None
                    self._Description = None
                    self._LinksArray = []
                    return
            Holder.__name__ = "FieldsArrayType_Holder"
            self.pyclass = Holder

    class LinksDataType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "LinksDataType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LinksDataType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"TableName"), aname="_TableName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FieldName"), aname="_FieldName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TableName = None
                    self._FieldName = None
                    self._Description = None
                    return
            Holder.__name__ = "LinksDataType_Holder"
            self.pyclass = Holder

    class IndexRequestDataType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "IndexRequestDataType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IndexRequestDataType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"TableName"), aname="_TableName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FieldName"), aname="_FieldName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TableName = None
                    self._FieldName = None
                    return
            Holder.__name__ = "IndexRequestDataType_Holder"
            self.pyclass = Holder

    class IndexResponseResultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "IndexResponseResultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IndexResponseResultType_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ErrorCode"), aname="_ErrorCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Status = None
                    self._ErrorCode = None
                    self._Description = None
                    return
            Holder.__name__ = "IndexResponseResultType_Holder"
            self.pyclass = Holder

    class IndexResponseDataType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "IndexResponseDataType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IndexResponseDataType_Def.schema
            TClist = [GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","IndexFieldsArrayType",lazy=False)(pname=(ns,"FieldsArray"), aname="_FieldsArray", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FieldsArray = []
                    return
            Holder.__name__ = "IndexResponseDataType_Holder"
            self.pyclass = Holder

    class IndexFieldsArrayType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        type = (schema, "IndexFieldsArrayType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IndexFieldsArrayType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"TableName"), aname="_TableName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FieldName"), aname="_FieldName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Level"), aname="_Level", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Count"), aname="_Count", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TableName = None
                    self._FieldName = None
                    self._Description = None
                    self._Level = None
                    self._Count = None
                    return
            Holder.__name__ = "IndexFieldsArrayType_Holder"
            self.pyclass = Holder

    class AppendDocumentationRequestObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AppendDocumentationRequestObject"
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        def __init__(self, **kw):
            ns = ns0.AppendDocumentationRequestObject_Dec.schema
            TClist = [GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","AppendRequestAuthType",lazy=False)(pname=(ns,"Auth"), aname="_Auth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","AppendRequestDataType",lazy=False)(pname=(ns,"Data"), aname="_Data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.openorange.com.ar/WSSpecification/DocumentationServices","AppendDocumentationRequestObject")
            kw["aname"] = "_AppendDocumentationRequestObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Auth = None
                    self._Data = None
                    return
            Holder.__name__ = "AppendDocumentationRequestObject_Holder"
            self.pyclass = Holder

    class AppendDocumentationResponseObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AppendDocumentationResponseObject"
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        def __init__(self, **kw):
            ns = ns0.AppendDocumentationResponseObject_Dec.schema
            TClist = [GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","AppendResponseResultType",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.openorange.com.ar/WSSpecification/DocumentationServices","AppendDocumentationResponseObject")
            kw["aname"] = "_AppendDocumentationResponseObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    return
            Holder.__name__ = "AppendDocumentationResponseObject_Holder"
            self.pyclass = Holder

    class GetDocumentationRequestObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetDocumentationRequestObject"
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        def __init__(self, **kw):
            ns = ns0.GetDocumentationRequestObject_Dec.schema
            TClist = [GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","GetRequestDataType",lazy=False)(pname=(ns,"Data"), aname="_Data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.openorange.com.ar/WSSpecification/DocumentationServices","GetDocumentationRequestObject")
            kw["aname"] = "_GetDocumentationRequestObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Data = None
                    return
            Holder.__name__ = "GetDocumentationRequestObject_Holder"
            self.pyclass = Holder

    class GetDocumentationResponseObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetDocumentationResponseObject"
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        def __init__(self, **kw):
            ns = ns0.GetDocumentationResponseObject_Dec.schema
            TClist = [GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","GetResponseResultType",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","GetResponseDataType",lazy=False)(pname=(ns,"Data"), aname="_Data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.openorange.com.ar/WSSpecification/DocumentationServices","GetDocumentationResponseObject")
            kw["aname"] = "_GetDocumentationResponseObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    self._Data = None
                    return
            Holder.__name__ = "GetDocumentationResponseObject_Holder"
            self.pyclass = Holder

    class GetIndexRequestObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetIndexRequestObject"
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        def __init__(self, **kw):
            ns = ns0.GetIndexRequestObject_Dec.schema
            TClist = [GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","IndexRequestDataType",lazy=False)(pname=(ns,"Data"), aname="_Data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.openorange.com.ar/WSSpecification/DocumentationServices","GetIndexRequestObject")
            kw["aname"] = "_GetIndexRequestObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Data = None
                    return
            Holder.__name__ = "GetIndexRequestObject_Holder"
            self.pyclass = Holder

    class GetIndexResponseObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetIndexResponseObject"
        schema = "http://www.openorange.com.ar/WSSpecification/DocumentationServices"
        def __init__(self, **kw):
            ns = ns0.GetIndexResponseObject_Dec.schema
            TClist = [GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","IndexResponseResultType",lazy=False)(pname=(ns,"Result"), aname="_Result", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.openorange.com.ar/WSSpecification/DocumentationServices","IndexResponseDataType",lazy=False)(pname=(ns,"Data"), aname="_Data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.openorange.com.ar/WSSpecification/DocumentationServices","GetIndexResponseObject")
            kw["aname"] = "_GetIndexResponseObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Result = None
                    self._Data = None
                    return
            Holder.__name__ = "GetIndexResponseObject_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.openorange.com.ar/WSSpecification/DocumentationServices)
